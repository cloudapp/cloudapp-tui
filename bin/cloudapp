#!/usr/bin/env ruby
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rubygems'
require 'gli'
require 'highline'
require 'pathname'

require 'cloudapp'
require 'cloudapp/config'
require 'cloudapp/presenters/drop_list_presenter'
require 'cloudapp/presenters/drop_presenter'


extend Forwardable
def_delegator 'HighLine.new', :color

def config
  CloudApp::Config.new
end

def account
  CloudApp::Account.using_token config.token
end


def add_action_requiring_credentials_to(command)
  command.action do |global_options, options, args|
    require_credentials

    set_format_on     options, from: global_options
    set_name_on       options
    set_privacy_on    options
    set_file_paths_on options
    set_bookmark_on   options
    yield options, args
  end
end

def require_credentials
  return unless config.token.nil?

  $stdout.puts 'Sign into your CloudApp account.'

  email        = HighLine.new.ask('Email: ')
  password     = HighLine.new.ask('Password: ') {|q| q.echo = false }
  config.token = CloudApp::Token.for_account email, password
end

def print_bad_token
  $stderr.puts color('email and password given are incorrect.', :bold)
  config.token = nil
end


def set_format_on(options, from)
  options[:format] = format_from_options from.fetch(:from)
end

def set_name_on(options)
  options.delete(:name) if options.fetch(:name, nil).nil?
end

def set_privacy_on(options)
  private = options.delete :private
  public  = options.delete :public
  options[:private] = private if private || public
end

def set_file_paths_on(options)
  file = options.delete :file
  options[:path] = Pathname.new(file) if file
end

def set_bookmark_on(options)
  url = options.delete :bookmark
  options[:url] = url if url
end

def format_from_options(options)
  if options[:format].nil?
    $stdout.tty? ? 'pretty' : 'csv'
  else
    options[:format].to_s
  end
end

def add_common_drop_flags(c)
  c.desc 'Drop name'
  c.arg_name 'name'
  c.flag :name

  c.desc 'Use a private (long) link'
  c.switch :private

  c.desc 'Use a public (short) link'
  c.switch :public
end


include GLI

program_desc 'All the pleasures of CloudApp now at your terminal'
version CloudApp::VERSION

desc 'Output format (default: pretty for tty, csv otherwise)'
arg_name 'csv,pretty'
flag [:f, :format]

desc 'List the newest drops'
command [:list, :ls] do |c|

  c.desc 'Number of drops to display'
  c.arg_name 'count'
  c.default_value '20'
  c.flag :n, :count

  c.desc 'Filter drops by active, trash, or all'
  c.arg_name 'filter'
  c.default_value 'active'
  c.flag :filter

  add_action_requiring_credentials_to(c) do |options, args|
    puts 'Waiting...'
    puts

    count  = options[:count].to_i
    filter = options[:filter]
    drops  = account.drops filter: filter, limit: count

    if drops.authorized?
      puts CloudApp::DropListPresenter.new(drops).present
    else
      print_bad_token
    end
  end
end

desc 'View the details of a drop'
command :details do |c|
  add_action_requiring_credentials_to(c) do |options, hrefs|
    puts 'Waiting...'
    puts

    hrefs.each do |href|
      drop = account.drop_at href
      if drop.authorized?
        puts CloudApp::DropPresenter.new(drop).present
      else
        print_bad_token
      end
    end
  end
end

desc 'Create a new bookmark to each URL and print each link'
arg_name 'url [url...]'
command :bookmark do |c|
  add_common_drop_flags c

  add_action_requiring_credentials_to(c) do |options, urls|
    urls.each do |url|
      print "Bookmarking #{ url }... "
      url  = URI.parse url
      drop = account.bookmark url, options
      puts drop.first.share_url
    end
  end
end

desc 'Upload each file and print each link'
arg_name 'file [file...]'
command :upload do |c|
  add_common_drop_flags c

  add_action_requiring_credentials_to(c) do |options, files|
    files.each do |file|
      file = Pathname.new file
      print "Uploading #{ file }... "
      drop = account.upload file, options
      puts drop.first.share_url
    end
  end
end

desc "Update a drop's name, privacy, bookmark link or file"
command :update do |c|
  add_common_drop_flags c

  c.desc 'Bookmark URL'
  c.arg_name 'url'
  c.flag :bookmark

  c.desc 'File'
  c.arg_name 'file'
  c.flag :file

  add_action_requiring_credentials_to(c) do |options, hrefs|
    hrefs.each do |href|
      print "Uploading #{ href }... "
      drop = account.update href, options
      puts drop.first.share_url
    end
  end
end

desc 'Send a drop to the trash'
arg_name 'href [href...]'
command :trash do |c|
  add_action_requiring_credentials_to(c) do |options, hrefs|
    hrefs.each do |href|
      print "Trashing #{ href }... "
      drop = account.trash_drop href

      if drop.authorized?
        puts 'done'
      else
        print_bad_token
      end
    end
  end
end

desc 'Recover a drop from the trash'
arg_name 'href [href...]'
command :recover do |c|
  add_action_requiring_credentials_to(c) do |options, hrefs|
    hrefs.each do |href|
      print "Recovering #{ href }... "
      drop = account.recover_drop href

      if drop.authorized?
        puts drop.first.share_url
      else
        print_bad_token
      end
    end
  end
end

desc 'Delete a drop immediately and bypass the trash'
arg_name 'href [href...]'
command :delete do |c|
  add_action_requiring_credentials_to(c) do |options, hrefs|
    hrefs.each do |href|
      if HighLine.new.agree("Delete #{ href } forever? (y/n)")
        print "Deleting #{ href }... "
        drop = account.delete_drop href

        if drop.authorized?
          puts 'done'
        else
          print_bad_token
        end
      else
        puts "OK. Not deleting #{ href }."
      end
    end
  end
end


exit GLI.run(ARGV)
